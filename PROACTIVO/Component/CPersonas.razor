@using Microsoft.EntityFrameworkCore
@using System.Globalization






<div class="container">
    @*LISTADO DE PERSONAS*@
    <RadzenPanel AllowCollapse="true" Style="width: 700px; margin: 40px auto;margin-bottom:0px !important;"
                 Expand=@(() => Change("Panel expanded")) Collapse=@(() => Change("Panel collapsed"))>
        <HeaderTemplate>
            <h4 class="m-0 d-flex align-items-center">
                <RadzenIcon Icon="account_box" Class="me-1" /><b>Personas</b>
            </h4>
        </HeaderTemplate>
        <ChildContent>
            <RadzenCard Class="mt-3">
                <RadzenDataList PageSize="4" WrapItems="true" AllowPaging="true"
                                Data="@listaPersonas" TItem="Persona">
                    <Template Context="persona">
                        <RadzenCard Style="width: 250px">
                            <div class="row">
                                <div class="col-md-5 text-truncate">
                                    <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{persona.Id}") Class="me-2" />
                                    <b>Salario: </b>
                                </div>
                                <div class="col-md-4 text-end">
                                    <RadzenBadge BadgeStyle="BadgeStyle.Success" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", persona.AspiracionSalarial)}") />
                                </div>
                            </div>
                            <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                            <div class="d-flex flex-row align-items-center">
                                <RadzenImage Path="@persona.Foto" Class="rounded-circle float-start me-3" Style="width: 80px; height: 80px;" />
                                <div>
                                    <h6 class="mb-0">@(persona.Nombres + " " + persona.Apellidos)</h6>
                                    <div>@persona.Edad</div>
                                    <div style="font-size: .8em">@(persona.Ciudad), @(persona.Pais)</div>
                                    <b>@(persona.Cargo)</b>
                                </div>
                            </div>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </RadzenCard>
        </ChildContent>
        <SummaryTemplate>
            <RadzenCard class="mt-3">
                <b>@listaPersonas.Count() Personas</b>
            </RadzenCard>
        </SummaryTemplate>
    </RadzenPanel>


    @*ANALISIS DE ASPIRACIONES AÑ*@
    <div class="row my-5">
        <div class="col-sm-12 col-lg-8">
            <RadzenChart ColorScheme="@colorScheme">
                @for (var year = 2013; year <= 2020; year++)
                {
                    var currentYearRevenue = revenue.Where(r => r.Year == year).ToList();
                    <RadzenColumnSeries Data="@currentYearRevenue" CategoryProperty="Quarter" Title="@year.ToString()" ValueProperty="Revenue" />
                }
                <RadzenColumnOptions Margin="0" />
                <RadzenValueAxis Formatter="@FormatAsUSD" />
            </RadzenChart>
        </div>
        <div class="col-sm-12 col-lg-4">
            <RadzenChart ColorScheme="@colorScheme">
                <RadzenPieSeries Data="@revenue.Where(r => r.Year == 2020)" Title="Revenue" CategoryProperty="Quarter" ValueProperty="Revenue" />
            </RadzenChart>
        </div>
    </div>
    <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3">Custom colors and styling</RadzenText>
    <div class="row my-5">
        <div class="col-sm-12">
            <RadzenChart>
                <RadzenAreaSeries Stroke="rgb(236,72,127)" StrokeWidth="2" Fill="rgba(236,72,127,.5)" Data="@revenue.Where(r => r.Year == 2020)" CategoryProperty="Quarter" ValueProperty="Revenue">
                    <ChildContent>
                        <RadzenMarkers MarkerType="MarkerType.Circle" Fill="#fff" Stroke="rgba(236,72,127)" StrokeWidth="2" Size="8" />
                    </ChildContent>
                    <TooltipTemplate Context="data">
                        Revenue for <span>@data.Quarter</span> 2020: <strong>@data.Revenue.ToString("C0", CultureInfo.CreateSpecificCulture("en-US"))</strong>
                    </TooltipTemplate>
                </RadzenAreaSeries>
                <RadzenCategoryAxis>
                    <RadzenGridLines Visible="true" Stroke="#ccc" LineType="LineType.Dashed" />
                </RadzenCategoryAxis>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                </RadzenValueAxis>
                <RadzenChartTooltipOptions Style="border: 1px solid rgb(236,72,127); background: #eee; color: #000;" />
                <RadzenLegend Visible="false" />
            </RadzenChart>
        </div>
    </div>
</div>








@code {
    //PARAMETROS
    List<Persona> listaPersonas = new();
    Persona persona = new();
    IEnumerable<ColorScheme> colorSchemes = Enum.GetValues(typeof(ColorScheme)).Cast<ColorScheme>();
    ColorScheme colorScheme = ColorScheme.Palette;
    IList<DataItem> revenue = new List<DataItem>();
    class DataItem
    {
        public int Year { get; set; }
        public string Quarter { get; set; }
        public double Revenue { get; set; }
    }
    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }
    class Persona
    {
        public int Id { get; set; }
        public string Nombres { get; set; }
        public string Apellidos { get; set; }
        public string Telefono { get; set; }
        public string Direccion { get; set; }
        public string Ciudad { get; set; }
        public string Pais { get; set; }
        public string Idioma { get; set; }
        public string AspiracionSalarial { get; set; }
        public string Foto { get; set; }
        public string Cargo { get; set; }
        public string Edad { get; set; }
    }
    IEnumerable<Persona> personas;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await cargueDatos();
    }
    //CARGUE DATOS
    private async Task cargueDatos()
    {
        //PERSONA 01
        persona = new();
        persona.Id = 1;
        persona.Nombres = "David Andres";
        persona.Apellidos = "Choachi Rodriguez";
        persona.Telefono = "+57 300 2466944";
        persona.Ciudad = "BOGOTA";
        persona.Pais = "COLOMBIA";
        persona.Idioma = "ESPAÑOL";
        persona.AspiracionSalarial = "$ 1'800.000 - $ 5'000.000";
        persona.Foto = "/img/Foto1.jpg";
        persona.Cargo = "Analista BI";
        persona.Direccion = "Calle 123 # 20 - 5";
        persona.Edad = "Edad: 29";
        listaPersonas.Add(persona);

        //PERSONA 02
        persona = new();
        persona.Id = 2;
        persona.Nombres = "Anderson";
        persona.Apellidos = "Piñarete";
        persona.Telefono = "+57 311 2927843";
        persona.Ciudad = "BOGOTA";
        persona.Pais = "COLOMBIA";
        persona.Idioma = "ESPAÑOL";
        persona.AspiracionSalarial = "$ 1'500.000 - $ 3'000.000";
        persona.Foto = "/img/Foto2.jpg";
        persona.Cargo = "Ingeniero de soporte en redes LAN";
        persona.Direccion = "Calle 41 # 10 - 5";
        persona.Edad = "Edad: 35";
        listaPersonas.Add(persona);

        //PERSONA 03
        persona = new();
        persona.Id = 3;
        persona.Nombres = "Jaison Hernando";
        persona.Apellidos = "Velasco Camacho";
        persona.Telefono = "+57 323 2330972";
        persona.Ciudad = "BOGOTA";
        persona.Pais = "COLOMBIA";
        persona.Idioma = "ESPAÑOL";
        persona.AspiracionSalarial = "$ 3'000.000 - $ 4'000.000";
        persona.Foto = "/img/Foto3.jpg";
        persona.Cargo = "Developer Enginer Middle";
        persona.Direccion = "Carrera 28 # 10 - 5";
        persona.Edad = "Edad: 31";
        listaPersonas.Add(persona);

        //PERSONA 04
        persona = new();
        persona.Id = 4;
        persona.Nombres = "Pepe";
        persona.Apellidos = "Sanchez";
        persona.Telefono = "+57 300 2466944";
        persona.Ciudad = "MEDELLIN";
        persona.Pais = "COLOMBIA";
        persona.Idioma = "ESPAÑOL";
        persona.AspiracionSalarial = "$ 4'800.000 - $ 8'000.000";
        persona.Foto = "/img/Foto4.jpg";
        persona.Cargo = "Jefe";
        listaPersonas.Add(persona);

        //PERSONA 05
        persona = new();
        persona.Id = 5;
        persona.Nombres = "Lupita";
        persona.Apellidos = "Choqui";
        persona.Telefono = "+57 311 2927843";
        persona.Ciudad = "CARMEN DE APICALA";
        persona.Pais = "COLOMBIA";
        persona.Idioma = "ESPAÑOL";
        persona.AspiracionSalarial = "$ 2'500.000 - $ 3'000.000";
        persona.Foto = "/img/Foto5.jpg";
        persona.Cargo = "Asesor";
        listaPersonas.Add(persona);

        //PERSONA 06
        persona = new();
        persona.Id = 6;
        persona.Nombres = "Mameluco";
        persona.Apellidos = "Señorito";
        persona.Telefono = "+57 323 2330972";
        persona.Ciudad = "CUCUTA";
        persona.Pais = "COLOMBIA";
        persona.Idioma = "ESPAÑOL";
        persona.AspiracionSalarial = "$ 10'000.000 - $ 11'000.000";
        persona.Foto = "/img/Foto6.jpg";
        persona.Cargo = "Director";
        listaPersonas.Add(persona);


        var random = new Random();

        for (var year = 2013; year <= 2020; year++)
        {
            for (var quarter = 1; quarter <= 4; quarter++)
            {
                revenue.Add(new DataItem
                    {
                        Year = year,
                        Quarter = $"Q{quarter}",
                        Revenue = random.NextDouble() * 200000
                    });
            }
        }
    }
    void Change(string text)
    {

    }
}
